name: Build Asterisk Git Version Daily

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:

  push:
    paths:
      - .github/workflows/build-git-daily.yml
      - scripts/discover-latest-versions.sh

  schedule:
    # Run daily at 18:00 UTC (2 hours before discover-releases)
    - cron: "0 18 * * *"

jobs:
  check-git-sha:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      current_sha: ${{ steps.current-sha.outputs.sha }}
      new_sha: ${{ steps.new-sha.outputs.sha }}
      changed: ${{ steps.check-change.outputs.changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install --user pyyaml jinja2

      - name: Fetch current git SHA
        id: current-sha
        run: |
          CURRENT_SHA=$(grep 'git_sha:' asterisk/supported-asterisk-builds.yml | sed 's/.*git_sha: *"\([^"]*\)".*/\1/')
          echo "sha=$CURRENT_SHA" >> $GITHUB_OUTPUT
          echo "📋 Current git SHA: $CURRENT_SHA"

      - name: Discover latest git SHA
        id: new-sha
        run: |
          # Use discover script to get latest git SHA
          echo "🔍 Fetching latest Asterisk git SHA..."
          ./scripts/discover-latest-versions.sh --git-only --output-yaml

          # Extract new SHA
          NEW_SHA=$(grep 'git_sha:' asterisk/supported-asterisk-builds.yml | sed 's/.*git_sha: *"\([^"]*\)".*/\1/')
          echo "sha=$NEW_SHA" >> $GITHUB_OUTPUT
          echo "🆕 Latest git SHA: $NEW_SHA"

      - name: Check if SHA changed
        id: check-change
        run: |
          CURRENT="${{ steps.current-sha.outputs.sha }}"
          NEW="${{ steps.new-sha.outputs.sha }}"

          if [ "$CURRENT" = "$NEW" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "📋 No git SHA change detected ($CURRENT)"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Git SHA changed: $CURRENT → $NEW"
          fi

  build-git-version:
    needs: check-git-sha
    if: needs.check-git-sha.outputs.changed == 'true'
    uses: ./.github/workflows/build-single-image.yml
    with:
      version: "git"
      distribution: "trixie"
      architectures: "amd64,arm64"
      additional_tags: "git-latest,development,testing,git-${{ needs.check-git-sha.outputs.new_sha }}"
      push: true
      registry: "andrius/asterisk"
    secrets: inherit

  commit-updated-yaml:
    needs: [check-git-sha, build-git-version]
    if: needs.check-git-sha.outputs.changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install --user pyyaml jinja2

      - name: Update YAML with new SHA
        run: |
          # Re-run discovery to update local YAML
          ./scripts/discover-latest-versions.sh --git-only --output-yaml

      - name: Generate configs and Dockerfiles for git version
        run: |
          echo "🔧 Generating config and Dockerfiles for git version..."

          # Generate config and Dockerfiles using build-asterisk.sh
          # This ensures consistency with the DRY template system
          if ./scripts/build-asterisk.sh git --force-config --dry-run; then
            echo "✅ Successfully generated config and Dockerfiles for git version"

            # Verify files were created
            if [ -f "asterisk/git-trixie/Dockerfile" ] && [ -f "asterisk/git-trixie/build.sh" ]; then
              echo "✅ Verified: Dockerfile and build.sh exist"
            else
              echo "⚠️ Warning: Some expected files may be missing"
              ls -la asterisk/git-trixie/ || echo "Directory doesn't exist"
            fi
          else
            echo "⚠️ Config generation completed with warnings"
          fi

      - name: Commit and push if build succeeded
        if: needs.build-git-version.outputs.build_result == 'success'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add the updated YAML and generated files
          git add asterisk/supported-asterisk-builds.yml
          git add configs/generated/asterisk-git-trixie.yml
          git add asterisk/git-trixie/

          # Create commit
          git commit -m "🔄 Update Asterisk git SHA to ${{ needs.check-git-sha.outputs.new_sha }}

          ✅ Docker images built and pushed successfully
          🐳 Registry: andrius/asterisk
          🏷️  Tags: git-latest, development, testing, git-${{ needs.check-git-sha.outputs.new_sha }}
          📦 Platforms: amd64, arm64

          📝 Files Updated:
          - asterisk/supported-asterisk-builds.yml (git SHA)
          - configs/generated/asterisk-git-trixie.yml (config)
          - asterisk/git-trixie/ (Dockerfile, build.sh, healthcheck.sh)

          Previous SHA: ${{ needs.check-git-sha.outputs.current_sha }}
          New SHA: ${{ needs.check-git-sha.outputs.new_sha }}

          Generated by: ${{ github.workflow }} (${{ github.run_id }})"

          # Push to main
          git push

          echo "✅ Updated supported-asterisk-builds.yml with new git SHA"

      - name: Fail if build did not succeed
        if: needs.build-git-version.outputs.build_result != 'success'
        run: |
          echo "❌ Build failed - will NOT commit YAML changes"
          echo "Git SHA will NOT be updated in repository"
          exit 1

  summary:
    needs: [check-git-sha, build-git-version, commit-updated-yaml]
    if: always() && needs.check-git-sha.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Generate summary
        run: |
          echo "## 🔄 Git Version Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Git SHA information
          echo "### 📋 Git SHA Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous SHA**: ${{ needs.check-git-sha.outputs.current_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest SHA**: ${{ needs.check-git-sha.outputs.new_sha }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.check-git-sha.outputs.changed }}" == "true" ]; then
            echo "- **Change Detected**: ✅ Yes" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Change Detected**: ⏭️ No (skipped build)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Build result
          if [ "${{ needs.check-git-sha.outputs.changed }}" == "true" ]; then
            echo "### 🐳 Docker Build Result" >> $GITHUB_STEP_SUMMARY

            if [ "${{ needs.build-git-version.result }}" == "success" ]; then
              echo "- **Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "- **Registry**: andrius/asterisk" >> $GITHUB_STEP_SUMMARY
              echo "- **Tags**: git-latest, development, testing, git-${{ needs.check-git-sha.outputs.new_sha }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Platforms**: amd64, arm64" >> $GITHUB_STEP_SUMMARY

              if [ "${{ needs.commit-updated-yaml.result }}" == "success" ]; then
                echo "- **YAML Updated**: ✅ Yes (committed to main)" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **YAML Updated**: ❌ Failed to commit" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **Build Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
              echo "- **YAML Updated**: ❌ No (build failed)" >> $GITHUB_STEP_SUMMARY
              echo "- **Action**: Build logs available in workflow run" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Build completed: $(date '+%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY
