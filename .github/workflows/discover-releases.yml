name: Discover New Asterisk Releases

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:

  push:
    paths:
      - .github/workflows/discover-releases.yml
      - scripts/discover-latest-versions.sh
      - scripts/get-asterisk-releases.sh
      - scripts/get-asterisk-certified-releases.sh

  schedule:
    # Run daily at 20:00 UTC
    - cron: "0 20 * * *"

jobs:
  discover-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python dependencies
        run: |
          pip install --user pyyaml jinja2

      - name: Update Asterisk releases
        working-directory: scripts
        run: |
          # Scripts now handle validation, TXT and YAML file generation
          echo "Fetching and validating regular Asterisk releases..."
          ./get-asterisk-releases.sh

          echo "Fetching and validating certified Asterisk releases..."
          ./get-asterisk-certified-releases.sh

      - name: Generate latest versions YAML
        working-directory: .
        run: |
          # Generate supported builds YAML from discovered versions
          ./scripts/discover-latest-versions.sh --output-yaml --updates-only --include-git


      - name: Extract new versions
        id: extract-versions
        run: |
          # Extract new versions and git changes from git diff on supported-asterisk-builds.yml
          if git diff --quiet HEAD -- asterisk/supported-asterisk-builds.yml; then
            echo "new_versions=" >> $GITHUB_OUTPUT
            echo "has_new_versions=false" >> $GITHUB_OUTPUT
            echo "git_sha_changed=false" >> $GITHUB_OUTPUT
            echo "üìã No new Asterisk releases or git changes detected"

            # Check if only release lists were updated (not buildable versions)
            if [ "$(git status --porcelain -- asterisk/asterisk-releases.txt asterisk/asterisk-certified-releases.txt asterisk/asterisk-releases.yml asterisk/asterisk-certified-releases.yml)" ]; then
              echo "release_lists_updated=true" >> $GITHUB_OUTPUT
              echo "üìù Release lists updated (no new buildable versions)"
            else
              echo "release_lists_updated=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No changes detected"
            fi
          else
            # Extract new versions from git diff
            NEW_VERSIONS=$(git diff HEAD -- asterisk/supported-asterisk-builds.yml | grep '^+.*version:' | sed 's/^+.*version: "\(.*\)"/\1/' | tr '\n' ' ' | sed 's/ $//')

            # Check for git SHA changes
            GIT_SHA_CHANGES=$(git diff HEAD -- asterisk/supported-asterisk-builds.yml | grep '^+.*git_sha:' | wc -l)

            if [ -n "$NEW_VERSIONS" ]; then
              echo "new_versions=$NEW_VERSIONS" >> $GITHUB_OUTPUT
              echo "has_new_versions=true" >> $GITHUB_OUTPUT
              echo "release_lists_updated=true" >> $GITHUB_OUTPUT
              echo "üéâ New Asterisk releases detected: $NEW_VERSIONS"
            else
              echo "new_versions=" >> $GITHUB_OUTPUT
              echo "has_new_versions=false" >> $GITHUB_OUTPUT
              echo "release_lists_updated=true" >> $GITHUB_OUTPUT
              echo "üìù Supported builds updated but no new versions detected"
            fi

            if [ "$GIT_SHA_CHANGES" -gt 0 ]; then
              echo "git_sha_changed=true" >> $GITHUB_OUTPUT
              NEW_GIT_SHA=$(git diff HEAD -- asterisk/supported-asterisk-builds.yml | grep '^+.*git_sha:' | sed 's/^+.*git_sha: *"\([^"]*\)".*/\1/' | head -1)
              echo "new_git_sha=${NEW_GIT_SHA:-unknown}" >> $GITHUB_OUTPUT
              echo "üîÑ Git SHA changed to: ${NEW_GIT_SHA:-unknown}"
            else
              echo "git_sha_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Cleanup existing PR and branch
        if: steps.extract-versions.outputs.has_new_versions == 'true'
        run: |
          BRANCH_NAME="asterisk-new-releases"

          echo "üîç Checking for existing branch: $BRANCH_NAME"

          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "üìå Found existing branch $BRANCH_NAME"

            # Get PR number for this branch
            PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --state open --json number --jq '.[0].number' || echo "")

            if [ -n "$PR_NUMBER" ]; then
              echo "üîí Closing existing PR #$PR_NUMBER"
              gh pr close "$PR_NUMBER" --delete-branch --comment "üîÑ Auto-closed: Creating new consolidated PR with latest releases"
            else
              echo "‚ö†Ô∏è No open PR found, deleting branch only"
              git push origin --delete "$BRANCH_NAME" || echo "‚ö†Ô∏è Could not delete remote branch"
            fi
          else
            echo "‚úÖ No existing branch found, proceeding with fresh PR"
          fi

          # Clean up local branch if it exists
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "üßπ Cleaning up local branch"
            git branch -D "$BRANCH_NAME" || true
          fi

      - name: Create consolidated PR
        if: steps.extract-versions.outputs.has_new_versions == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="asterisk-new-releases"
          NEW_VERSIONS="${{ steps.extract-versions.outputs.new_versions }}"
          GIT_SHA_CHANGED="${{ steps.extract-versions.outputs.git_sha_changed }}"
          NEW_GIT_SHA="${{ steps.extract-versions.outputs.new_git_sha }}"

          echo "üîÑ Creating consolidated PR for all changes"
          echo "Branch: $BRANCH_NAME"

          # Create clean branch from main
          git checkout -b "$BRANCH_NAME"

          # Add all modified files (already generated by previous steps)
          git add asterisk/asterisk-releases.txt
          git add asterisk/asterisk-certified-releases.txt
          git add asterisk/asterisk-releases.yml
          git add asterisk/asterisk-certified-releases.yml
          git add asterisk/supported-asterisk-builds.yml

          # Build commit message
          COMMIT_MSG="Asterisk releases update"

          if [ -n "$NEW_VERSIONS" ]; then
            VERSION_COUNT=$(echo "$NEW_VERSIONS" | wc -w)
            COMMIT_MSG="$COMMIT_MSG - ‚ú® Added $VERSION_COUNT version(s): $NEW_VERSIONS"
          fi

          if [ "$GIT_SHA_CHANGED" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG - üîÑ Updated git SHA: $NEW_GIT_SHA"
          fi

          COMMIT_MSG="$COMMIT_MSG - Auto-generated by: ${{ github.workflow }} (${{ github.run_id }})"

          # Create consolidated commit
          git commit -m "$COMMIT_MSG"

          # Push branch
          git push -u origin "$BRANCH_NAME"

          # Build PR title
          PR_TITLE="New Asterisk Releases Update"
          if [ -n "$NEW_VERSIONS" ]; then
            PR_TITLE="$PR_TITLE: $NEW_VERSIONS"
          fi

          # Build PR body
          PR_BODY="## Asterisk Releases Update\n\n"

          if [ -n "$NEW_VERSIONS" ]; then
            PR_BODY="${PR_BODY}### üì¶ New Versions Detected\n\n"

            # Categorize versions
            STABLE=""
            RC=""
            BETA=""
            CERT=""

            for version in $NEW_VERSIONS; do
              case "$version" in
                *-rc*) RC="$RC- $version (Release Candidate)\n" ;;
                *-beta*) BETA="$BETA- $version (Beta Release)\n" ;;
                *-cert*) CERT="$CERT- $version (Certified Release)\n" ;;
                *) STABLE="$STABLE- $version (Stable Release)\n" ;;
              esac
            done

            [ -n "$STABLE" ] && PR_BODY="${PR_BODY}**Stable Releases:**\n$STABLE\n"
            [ -n "$RC" ] && PR_BODY="${PR_BODY}**Release Candidates:**\n$RC\n"
            [ -n "$BETA" ] && PR_BODY="${PR_BODY}**Beta Releases:**\n$BETA\n"
            [ -n "$CERT" ] && PR_BODY="${PR_BODY}**Certified Releases:**\n$CERT\n"
          fi

          if [ "$GIT_SHA_CHANGED" == "true" ]; then
            PR_BODY="${PR_BODY}### üîÑ Git Development Version\n\n"
            PR_BODY="${PR_BODY}- **New SHA**: \`$NEW_GIT_SHA\`\n\n"
          fi

          PR_BODY="${PR_BODY}### ‚úÖ Changes Made\n\n"
          PR_BODY="${PR_BODY}- ‚ú® Updated supported-asterisk-builds.yml with new versions\n"
          PR_BODY="${PR_BODY}- üì¶ Refreshed release lists (TXT and YAML formats)\n"
          PR_BODY="${PR_BODY}- üéØ Ready for build system integration\n\n"

          PR_BODY="${PR_BODY}### üé® Review Checklist\n\n"
          PR_BODY="${PR_BODY}- [ ] Verify all versions are legitimate Asterisk releases\n"
          PR_BODY="${PR_BODY}- [ ] Check versions follow semantic versioning\n"
          PR_BODY="${PR_BODY}- [ ] Confirm release types are appropriate for building\n"
          PR_BODY="${PR_BODY}- [ ] Review if special build configurations needed\n\n"

          PR_BODY="${PR_BODY}### üöÄ Next Steps\n\n"
          PR_BODY="${PR_BODY}After merging this PR:\n"
          PR_BODY="${PR_BODY}- Build system will support new versions\n"
          PR_BODY="${PR_BODY}- Can trigger builds via build-images workflow\n"
          PR_BODY="${PR_BODY}- Versions will be available in build matrix\n\n"

          PR_BODY="${PR_BODY}### ü§ñ Automation Details\n\n"
          PR_BODY="${PR_BODY}- **Branch**: $BRANCH_NAME\n"
          PR_BODY="${PR_BODY}- **Workflow**: ${{ github.workflow }}\n"
          PR_BODY="${PR_BODY}- **Run ID**: ${{ github.run_id }}\n"
          PR_BODY="${PR_BODY}- **Generated**: $(date '+%Y-%m-%d %H:%M:%S UTC')\n"

          # Create PR via gh CLI
          gh pr create \
            --title "$PR_TITLE" \
            --body "$(printf '%b' "$PR_BODY")" \
            --base main \
            --head "$BRANCH_NAME" || {
              echo "‚ùå Failed to create PR via gh CLI"
              echo "Branch $BRANCH_NAME has been pushed with changes"
              exit 1
            }

          echo "‚úÖ Successfully created consolidated PR"

          # Return to main branch
          git checkout main

      - name: Summary
        if: always()
        run: |
          echo "## üîç Release Discovery Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Release statistics
          if [ -f asterisk/asterisk-releases.txt ]; then
            RELEASE_COUNT=$(wc -l < asterisk/asterisk-releases.txt)
            echo "- üì¶ **Regular releases**: $RELEASE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f asterisk/asterisk-certified-releases.txt ]; then
            CERT_COUNT=$(wc -l < asterisk/asterisk-certified-releases.txt)
            echo "- üèÜ **Certified releases**: $CERT_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f asterisk/supported-asterisk-builds.yml ]; then
            BUILD_COUNT=$(grep -c "version:" asterisk/supported-asterisk-builds.yml || echo "0")
            echo "- ‚öôÔ∏è **Supported build versions**: $BUILD_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Action taken
          if [ "${{ steps.extract-versions.outputs.has_new_versions }}" == "true" ]; then
            echo "### Asterisk Updates Detected" >> $GITHUB_STEP_SUMMARY
            echo "- üîÄ **Action**: Created consolidated Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "- üéØ **Branch**: asterisk-new-releases" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ **New Versions**: ${{ steps.extract-versions.outputs.new_versions }}" >> $GITHUB_STEP_SUMMARY
            echo "- ‚öôÔ∏è **Next**: Review and merge the consolidated PR to enable building" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.extract-versions.outputs.release_lists_updated }}" == "true" ]; then
            echo "### üìù Release Lists Updated" >> $GITHUB_STEP_SUMMARY
            echo "- üîÄ **Action**: Committed release metadata updates to main" >> $GITHUB_STEP_SUMMARY
            echo "- üìä **Impact**: Release lists refreshed, no new buildable versions" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ÑπÔ∏è No Changes" >> $GITHUB_STEP_SUMMARY
            echo "- üîÄ **Action**: No updates needed" >> $GITHUB_STEP_SUMMARY
            echo "- üìä **Status**: All release data is current" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Discovery completed: $(date '+%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY

