name: Discover New Asterisk Releases

on:
  workflow_dispatch:

  push:
    paths:
      - .github/workflows/discover-releases.yml
      - asterisk/scripts/discover-latest-versions.sh
      - asterisk/scripts/get-asterisk-releases.sh
      - asterisk/scripts/get-asterisk-certified-releases.sh

  schedule:
    # Run daily at 20:00 UTC
    - cron: "0 20 * * *"

jobs:
  discover-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python dependencies
        run: |
          pip install --user pyyaml jinja2

      - name: Update Asterisk releases
        working-directory: asterisk/asterisk/scripts
        run: |
          # Scripts now handle validation, TXT and YAML file generation
          echo "Fetching and validating regular Asterisk releases..."
          ./get-asterisk-releases.sh

          echo "Fetching and validating certified Asterisk releases..."
          ./get-asterisk-certified-releases.sh

      - name: Generate build configurations
        working-directory: asterisk/asterisk
        run: |
          # Generate configs for all discovered versions
          python3 scripts/generate-configs.py \
            --output-dir configs/generated \
            --force

      - name: Generate Docker build matrix
        working-directory: asterisk/asterisk
        run: |
          # Create build matrix for GitHub Actions
          python3 -c "
          import os
          import yaml
          import json
          from pathlib import Path

          configs_dir = Path('configs/generated')
          matrix = {'include': []}

          for config_file in configs_dir.glob('*.yml'):
              with open(config_file, 'r') as f:
                  config = yaml.safe_load(f)

              matrix['include'].append({
                  'config_file': str(config_file.relative_to('.')),
                  'version': config['version'],
                  'os_type': config['base']['os'],
                  'distribution': config['base']['distribution'],
                  'tags': config['docker']['tags'][:3],  # Limit tags
                  'platforms': config['docker']['platforms']
              })

          # Sort by version (newest first)
          matrix['include'].sort(key=lambda x: x['version'], reverse=True)

          # Limit to 50 most recent versions to avoid too large matrix
          matrix['include'] = matrix['include'][:50]

          with open('.github/build-matrix.json', 'w') as f:
              json.dump(matrix, f, indent=2)
          "

      - name: Check for changes
        id: changes
        run: |
          if [ "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Files changed:"
            git status --short
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Commit and push updates
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add asterisk/asterisk/asterisk-releases.txt
          git add asterisk/asterisk/asterisk-certified-releases.txt
          git add asterisk/asterisk/asterisk-releases.yml
          git add asterisk/asterisk/asterisk-certified-releases.yml
          git add asterisk/asterisk/configs/generated/
          git add .github/build-matrix.json

          # Create commit with timestamp
          git commit -m "🔄 Auto-update Asterisk releases and configs [$(date '+%Y-%m-%d %H:%M UTC')]

          - Updated release lists from downloads.asterisk.org
          - Generated build configurations for $(find asterisk/asterisk/configs/generated -name '*.yml' | wc -l) versions
          - Updated build matrix for CI/CD

          Generated by: ${{ github.workflow }} (${{ github.run_id }})"

          git push

      - name: Summary
        if: always()
        run: |
          echo "## Release Discovery Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f asterisk/asterisk/asterisk-releases.txt ]; then
            RELEASE_COUNT=$(wc -l < asterisk/asterisk/asterisk-releases.txt)
            echo "- 📦 **Regular releases**: $RELEASE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f asterisk/asterisk/asterisk-certified-releases.txt ]; then
            CERT_COUNT=$(wc -l < asterisk/asterisk/asterisk-certified-releases.txt)
            echo "- 🏆 **Certified releases**: $CERT_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d asterisk/asterisk/configs/generated ]; then
            CONFIG_COUNT=$(find asterisk/asterisk/configs/generated -name '*.yml' | wc -l)
            echo "- ⚙️ **Build configurations**: $CONFIG_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.changes.outputs.changes }}" == "true" ]; then
            echo "- ✅ **Changes committed and pushed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ **No changes detected**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Last updated: $(date '+%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY

